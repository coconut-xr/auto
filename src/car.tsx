/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 -t -r ./public/ ./public/car.glb -o ./src/car.tsx 
*/

import * as THREE from "three";
import React, { useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import {
  BufferGeometry,
  Euler,
  Group,
  Material,
  Mesh,
  Plane,
  Quaternion,
  Vector3,
} from "three";
import { isXIntersection } from "@coconut-xr/xinteraction";
import { CylinderCollider, RigidBody } from "@react-three/rapier";
import { useStore } from "./state.js";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Object_10: THREE.Mesh;
    Object_11: THREE.Mesh;
    Object_12: THREE.Mesh;
    Object_13: THREE.Mesh;
    Object_14: THREE.Mesh;
    Object_15: THREE.Mesh;
    Object_16: THREE.Mesh;
    Object_17: THREE.Mesh;
    Object_18: THREE.Mesh;
    Object_19: THREE.Mesh;
    Object_2: THREE.Mesh;
    Object_20: THREE.Mesh;
    Object_21: THREE.Mesh;
    Object_22: THREE.Mesh;
    Object_23: THREE.Mesh;
    Object_24: THREE.Mesh;
    Object_25: THREE.Mesh;
    Object_26: THREE.Mesh;
    Object_27: THREE.Mesh;
    Object_28: THREE.Mesh;
    Object_29: THREE.Mesh;
    Object_3: THREE.Mesh;
    Object_30: THREE.Mesh;
    Object_31: THREE.Mesh;
    Object_32: THREE.Mesh;
    Object_33: THREE.Mesh;
    Object_34: THREE.Mesh;
    Object_35: THREE.Mesh;
    Object_36: THREE.Mesh;
    Object_37: THREE.Mesh;
    Object_38: THREE.Mesh;
    Object_39: THREE.Mesh;
    Object_4: THREE.Mesh;
    Object_5: THREE.Mesh;
    Object_6: THREE.Mesh;
    Object_7: THREE.Mesh;
    Object_8: THREE.Mesh;
    Object_9: THREE.Mesh;
    wheel: THREE.Mesh;
  };
  materials: {
    ["chrome.002"]: THREE.MeshStandardMaterial;
    black_glass: THREE.MeshStandardMaterial;
    ["inner_rim.001"]: THREE.MeshStandardMaterial;
    emzone_padanga: THREE.MeshStandardMaterial;
    ["glass2.001"]: THREE.MeshStandardMaterial;
    detail_glass_red: THREE.MeshStandardMaterial;
    leather: THREE.MeshStandardMaterial;
    ["plastic.002"]: THREE.MeshStandardMaterial;
    mirror: THREE.MeshStandardMaterial;
    grille: THREE.MeshStandardMaterial;
    INTERIOR_LOD0: THREE.MeshStandardMaterial;
    redglass: THREE.MeshStandardMaterial;
    reflector: THREE.MeshStandardMaterial;
    ["window.001"]: THREE.MeshStandardMaterial;
    ["rim.002"]: THREE.MeshStandardMaterial;
    wood: THREE.MeshStandardMaterial;
    undercarriage: THREE.MeshStandardMaterial;
    ["Material.000"]: THREE.MeshStandardMaterial;
    black: THREE.MeshStandardMaterial;
    NODAMAGE_LOD0: THREE.MeshStandardMaterial;
    chrome: THREE.MeshStandardMaterial;
    ["Material.003"]: THREE.MeshStandardMaterial;
    bottom: THREE.MeshStandardMaterial;
    body: THREE.MeshStandardMaterial;
    digital_gauge: THREE.MeshStandardMaterial;
    metal2: THREE.MeshStandardMaterial;
    plastic2: THREE.MeshStandardMaterial;
    rubber: THREE.MeshStandardMaterial;
    ["rubber_trim.002"]: THREE.MeshStandardMaterial;
    ["Material.002"]: THREE.MeshStandardMaterial;
    BRAKES: THREE.MeshStandardMaterial;
    RK_rubber_black: THREE.MeshStandardMaterial;
    RK_chrome: THREE.MeshStandardMaterial;
    LIGHTS_lod0: THREE.MeshStandardMaterial;
    reverse_light_lod0: THREE.MeshStandardMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/car.glb") as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh
          geometry={nodes.Object_10.geometry}
          material={materials["chrome.002"]}
        />
        <mesh
          geometry={nodes.Object_11.geometry}
          material={materials.black_glass}
        />
        <mesh
          geometry={nodes.Object_12.geometry}
          material={materials["inner_rim.001"]}
        />
        <mesh
          geometry={nodes.Object_13.geometry}
          material={materials.emzone_padanga}
        />
        <mesh
          geometry={nodes.Object_14.geometry}
          material={materials["glass2.001"]}
        />
        <mesh
          geometry={nodes.Object_15.geometry}
          material={materials.detail_glass_red}
        />
        <mesh
          geometry={nodes.Object_16.geometry}
          material={materials.leather}
        />
        <mesh
          geometry={nodes.Object_17.geometry}
          material={materials["plastic.002"]}
        />
        <mesh geometry={nodes.Object_18.geometry} material={materials.mirror} />
        <mesh geometry={nodes.Object_19.geometry} material={materials.grille} />
        <mesh
          geometry={nodes.Object_2.geometry}
          material={materials.INTERIOR_LOD0}
        />
        <mesh
          geometry={nodes.Object_20.geometry}
          material={materials.redglass}
        />
        <mesh
          geometry={nodes.Object_21.geometry}
          material={materials.reflector}
        />
        <mesh
          geometry={nodes.Object_22.geometry}
          material={materials["window.001"]}
        />
        <mesh
          geometry={nodes.Object_23.geometry}
          material={materials["rim.002"]}
        />
        <mesh geometry={nodes.Object_24.geometry} material={materials.wood} />
        <mesh
          geometry={nodes.Object_25.geometry}
          material={materials.undercarriage}
        />
        <mesh
          geometry={nodes.Object_26.geometry}
          material={materials["Material.000"]}
        />
        <mesh geometry={nodes.Object_27.geometry} material={materials.black} />
        <mesh
          geometry={nodes.Object_28.geometry}
          material={materials.NODAMAGE_LOD0}
        />
        <mesh geometry={nodes.Object_29.geometry} material={materials.chrome} />
        <mesh
          geometry={nodes.Object_3.geometry}
          material={materials["Material.003"]}
        />
        <mesh geometry={nodes.Object_30.geometry} material={materials.bottom} />
        <mesh geometry={nodes.Object_31.geometry} material={materials.body} />
        <mesh geometry={nodes.Object_32.geometry} material={materials.body} />
        <mesh
          geometry={nodes.Object_33.geometry}
          material={materials.digital_gauge}
        />
        <mesh geometry={nodes.Object_34.geometry} material={materials.metal2} />
        <mesh
          geometry={nodes.Object_35.geometry}
          material={materials.plastic2}
        />
        <mesh
          geometry={nodes.Object_36.geometry}
          material={materials.plastic2}
        />
        <mesh
          geometry={nodes.Object_37.geometry}
          material={materials.plastic2}
        />
        <mesh geometry={nodes.Object_38.geometry} material={materials.rubber} />
        <mesh
          geometry={nodes.Object_39.geometry}
          material={materials["rubber_trim.002"]}
        />
        <mesh
          geometry={nodes.Object_4.geometry}
          material={materials["Material.002"]}
        />
        <mesh geometry={nodes.Object_5.geometry} material={materials.BRAKES} />
        <mesh
          geometry={nodes.Object_6.geometry}
          material={materials.RK_rubber_black}
        />
        <mesh
          geometry={nodes.Object_7.geometry}
          material={materials.RK_chrome}
        />
        <mesh
          geometry={nodes.Object_8.geometry}
          material={materials.LIGHTS_lod0}
        />
        <mesh
          geometry={nodes.Object_9.geometry}
          material={materials.reverse_light_lod0}
        />
        <SteeringWheel
          geometry={nodes.wheel.geometry}
          material={materials.INTERIOR_LOD0}
        />
      </group>
    </group>
  );
}

const defaultQuaternion = new Quaternion();
const currentPointToObjectNormal = new Vector3();
const wheelRotationPlaneNormal = new Vector3(0, 1, 0).applyEuler(
  new Euler(18 * (Math.PI / 180), 0, 0)
);

const state = useStore.getState();

function SteeringWheel({
  geometry,
  material,
}: {
  geometry: BufferGeometry;
  material: Material;
}) {
  const ref = useRef<Group>(null);
  const downState = useRef<{
    pointerId: number;
    pointToObjectNormal: Vector3;
  }>();
  useFrame(() => {
    const { steering } = useStore.getState();
    ref.current?.quaternion.setFromAxisAngle(
      wheelRotationPlaneNormal,
      steering
    );
  });
  return (
    <group ref={ref} position={[1.405, -1.337, 2.467]}>
      <mesh
        onPointerDown={(e) => {
          if (
            ref.current != null &&
            downState.current == null &&
            isXIntersection(e)
          ) {
            e.stopPropagation();
            (e.target as HTMLElement).setPointerCapture(e.pointerId);
            downState.current = {
              pointerId: e.pointerId,
              pointToObjectNormal: ref.current
                .parent!.worldToLocal(e.point.clone())
                .negate()
                .add(ref.current.position)
                .projectOnPlane(wheelRotationPlaneNormal)
                .normalize(),
            };
          }
        }}
        onPointerUp={(e) => {
          if (downState.current?.pointerId != e.pointerId) {
            return;
          }
          downState.current = undefined;
          state.setNatuerlichSteering(0);
        }}
        onPointerMove={(e) => {
          if (
            ref.current == null ||
            downState.current == null ||
            e.pointerId != downState.current.pointerId ||
            !isXIntersection(e)
          ) {
            return;
          }
          ref.current
            .parent!.worldToLocal(currentPointToObjectNormal.copy(e.point))
            .negate()
            .add(ref.current.position)
            .projectOnPlane(wheelRotationPlaneNormal)
            .normalize();

          const invert =
            currentPointToObjectNormal.x >
            downState.current.pointToObjectNormal.x;

          state.setNatuerlichSteering(
            (invert ? -1 : 1) *
              downState.current.pointToObjectNormal.angleTo(
                currentPointToObjectNormal
              )
          );
        }}
        visible={false}
        position={[0, 0.37, 0.19]}
        scale={0.73}
        scale-y={0.1}
        rotation-x={18 * (Math.PI / 180)}
      >
        <cylinderGeometry />
      </mesh>
      <mesh geometry={geometry} material={material} />
    </group>
  );
}

useGLTF.preload("/car.glb");
